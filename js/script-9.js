/*
* План занятия
*
* - Прототипное наследование
* - Прототип обьекта и Object.create()
* - Создание обьектов через new - функция-конструктор
* - Статические методы и свойства
*/

// Прототипное наследование это возможность связать обьекты по ссылке чтобы получить свойства другого обьекта
// У каждого обьекта есть ссылка на другой обьект (это называеться прототип)
// Мы можем привязать один обьект к другому и сделать один обьект который будет для другого прототипом
// Как выглядит прототип. У каждого лобьекта есть такое свойство __proto__: Object
// В  этом свойстве лежить ссылка на прототип этого обьекта на какой-то другой обьект с такими же свойствасмм и методами
// Свойство __proto__ есть у каждого обьета.
// Мы можем делать это автоматически или в ручную.
// Следующую связь ObjectA и для него пусть прототип будет ObjectB То есть в свойство __proto__ на ObjectA запишеться ссылка на весь
// обьект ObjectB. И тогда ObjectB становиться прототипом для ObjectA И тогда мы можем получить через ObectA все свойства ObjectB
// Цепочка модет быть бесконечная. Это не только связь между двумя обьектами это связть между произвольным количеством обьектов
// это называется цепочка прототипов
// Это набор обьектов которые связанны в цепочку ссылочками друг на друга
// Есть первый элемент цепочки который не являеться прототипом ни для чего и есть последний элемент в цепочке и о нем сеяас будет говорить
//  Главное чтобы в конце чепочки стоит Object прототайп или арей прототайи главное хранилице методов и свойств обьекта
// Пример

const objC = {
    z: 3,
}

const objB = Object.create(objC) {
    
    y: 2,
        __proto__: objC,
}

const objv = {
    z: 3,
    __proto__: Object
}

console.log(objA)

// Очень важно что цепочка строиться с конца. У нас было А В С. Мы делаем самый главный наш прототип в конце С а потом идем на лево на лево
